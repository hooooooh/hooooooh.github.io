<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Note anything]]></title>
  <link href="http://hooooooh.github.io/atom.xml" rel="self"/>
  <link href="http://hooooooh.github.io/"/>
  <updated>2014-01-28T12:38:26+09:00</updated>
  <id>http://hooooooh.github.io/</id>
  <author>
    <name><![CDATA[09mura]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Excel のデータを読み込んで JSON にしたいよ]]></title>
    <link href="http://hooooooh.github.io/blog/2014/01/20/read-xls-data/"/>
    <updated>2014-01-20T23:21:26+09:00</updated>
    <id>http://hooooooh.github.io/blog/2014/01/20/read-xls-data</id>
    <content type="html"><![CDATA[<p>Excel のデータを読み込んで JSON にする処理があったので、<br/>
スプレッドシートをパース出来る roo という gem を使ってみました。</p>

<p><a href="https://github.com/Empact/roo">rooのGitHubページ</a><br/>
<a href="http://roo.rubyforge.org/">rooの公式サイト</a></p>

<h2>1　Gemfile に gem roo を追加</h2>

<pre><code>gem 'roo'
</code></pre>

<h2>2　Excel を読み込んで JSON にする処理</h2>

<p>こんな xlsx を読み込みたい<br/>
<img src="../images/2014-01-20-read-xls-data/xls_img_01.png" height="202" width="245" alt="" /></p>

<pre><code>def roo_test

    # Excelデータを取得する
    xls = Roo::Spreadsheet.open('Excelへのパス')

    # JSON データを入れる用
    data_list = []

    xls.each_with_pagename do |name, sheet|
        if name == '読み込みたいシート名'

            row_count = sheet.last_row.to_i

            column_name_ary = sheet.row(1)

            (2..row_count).each do |index|
                xls_row_data = sheet.row(index)
                row_data = {}
                row_data[column_name_ary[0]] = xls_row_data[0]
                row_data[column_name_ary[1]] = xls_row_data[1]
                data_list.push(row_data)
            end
        end
    end
    render json: data_list
end
</code></pre>

<h2>3　JSONできました</h2>

<p>[{&#8220;name&#8221;:&#8221;aaa&#8221;,&#8221;mail_address&#8221;:&#8221;bbb@ccc.com&#8221;},{&#8220;name&#8221;:&#8221;hoge&#8221;,&#8221;mail_address&#8221;:&#8221;fuga@piyo.com&#8221;}]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL2 Errorが出るよ]]></title>
    <link href="http://hooooooh.github.io/blog/2014/01/17/mysql2-error/"/>
    <updated>2014-01-17T13:36:14+09:00</updated>
    <id>http://hooooooh.github.io/blog/2014/01/17/mysql2-error</id>
    <content type="html"><![CDATA[<p>すごく初歩的なのだろうし、間違っているトコもありそうだけど…。</p>

<p>Railsプロジェクトを作成する時に、MySQLを使うって事にすると<br/>
エラーを出してしまって、はっとすることがあるのでメモします。</p>

<h2>1　DBをMySQLに指定して、プロジェクト作成</h2>

<pre><code>bundle exec rails new test_mysql_project -d mysql
</code></pre>

<h2>2　プロジェクトに移動</h2>

<pre><code>cd test_mysql_project
</code></pre>

<h2>3　gemをインストール</h2>

<pre><code>bundle install
</code></pre>

<h2>4　起動</h2>

<pre><code>bundle exec rails s
</code></pre>

<h2>4　MySQL2 Errorのエラーになる(>_&lt;)</h2>

<pre><code>/Users/XXXXX/test_mysql_project/vendor/bundle/gems
/mysql2-0.3.14/lib/mysql2/client.rb:67:in 
`connect': Can't connect to local MySQL server through socket 
'/tmp/mysql.sock' (2) (Mysql2::Error)
</code></pre>

<p>socket&#8217;/tmp/mysql.sock&#8217;を通じてローカルのMySQLサーバーに<br/>
接続することが出来ませんという意味のエラーになります。<br/>
<a href="http://www.hi-ho.ne.jp/tsumiki/book_sup2.html">http://www.hi-ho.ne.jp/tsumiki/book_sup2.html</a>
に詳しく書いてありました。<br/>
MySQLは起動している前提ですので、パスを指定していない、間違っていることがわかりました。</p>

<h2>5　config/database.ymlを修正する</h2>

<p>socket:のところをなおします。</p>

<pre><code>development:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: test_mysql_project_development
  pool: 5
  username: XXXX（設定したやつ）
  password: XXXX（設定したやつ）
  host: localhost
  socket: /Applications/MAMP/tmp/mysql/mysql.sock（環境にあわせる）
</code></pre>

<p>test用、production用の定義もあわせてなおします。</p>

<h2>6　ふたたび、MySQL2 Errorのエラーになる</h2>

<pre><code>/Users/XXXXX/test_mysql_project/vendor/bundle/gems/
mysql2-0.3.14/lib/mysql2/client.rb:67:in 
`connect': Unknown database 'test_mysql_project_development' (Mysql2::Error)
</code></pre>

<p>DB作成してないよという意味のエラーになります。</p>

<h2>7　DBを作成</h2>

<p>以下のコマンドでdatabase.ymlに書いたDBが作成されます。</p>

<pre><code>bundle exec rake db:create:all
</code></pre>

<h2>8　起動</h2>

<pre><code>bundle exec rails s
</code></pre>

<p>エラーがでなく、起動できました。
やったー。</p>

<p>すごく基本的なことなのに、<br/>
はずかしながら2,3回同じエラーをみて、毎回あれれ…となったので<br/>
メモしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages を試してみたよ]]></title>
    <link href="http://hooooooh.github.io/blog/2014/01/08/github-pages-woshi-sitemitayo/"/>
    <updated>2014-01-08T21:57:40+09:00</updated>
    <id>http://hooooooh.github.io/blog/2014/01/08/github-pages-woshi-sitemitayo</id>
    <content type="html"><![CDATA[<p>GitHub Pagesを試してみました。</p>

<p>以下の記事を参考にしました。</p>

<p><a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/">http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/</a>
<a href="http://randd.kwappa.net/2013/04/16/521">http://randd.kwappa.net/2013/04/16/521</a></p>

<p>ほとんど参考記事のまねっこだけど、私が試したことをメモメモ…。</p>

<h2>1　GitHub にリポジトリを作成</h2>

<p>リポジトリ名は [username].github.io にします。<br/>
[username]には自分のユーザ名を入れます。<br/>
私の場合は、ユーザー名が hooooooh なので、「hooooooh.github.io」で作成しました。</p>

<h2>2　Octopress をセットアップ</h2>

<p>Octopress は jekyll を使って作るブログ構築用のフレームワークで、<br/>
GitHub Pages と組み合わせると、とても簡単にブログが作れる。
しかも無料！</p>

<p>セットアップは公式サイトにのっています。<br/>
<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<pre><code>git clone git@github.com:imathis/octopress.git [username].github.io
cd username.github.io
gem install bundler
bundle install
bundle exec rake install
bundle exec rake setup_github_pages
</code></pre>

<p>デプロイ先を聞かれるので、</p>

<pre><code>git@github.com:[username]/[username].github.com.git
</code></pre>

<p>と入力。</p>

<p>できたー。</p>

<h2>3　_config.yml に設定項目を記入</h2>

<p>公式サイトの_config.yml設定の部分を見ながら必要なところだけ記入<br/>
<a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></p>

<pre><code>url: http://[username].github.io
title: hoge → サイトのタイトルをいれます
subtitle: fuga → サイトのサブタイトルをいれます
author: 09mura
simple_search: http://google.com/search
description:
</code></pre>

<h2>4　記事を作成する</h2>

<p>記事のタイトルをきめて以下を実行します。</p>

<pre><code>bundle exec rake new_post['記事のタイトル']
</code></pre>

<p>そうすると、source/_post/YYYY-MM-DD-title.markdownが作られるので<br/>
あとは、Markdownやhtmlで記事を書きます。</p>

<h2>5　ローカルで確認</h2>

<p>以下を実行してブラウザで http://localhost:4000/ にアクセスしたらローカルで確認できます。</p>

<pre><code>bundle exec rake preview
</code></pre>

<h2>6　テーマを変える</h2>

<p>テーマいろいろあるけど…<br/>
<a href="http://opthemes.com/">http://opthemes.com/</a><br/>
わたしは darkStripes というテーマにしてみました。<br/>
以下を実行してテーマを適用します。</p>

<pre><code>git clone https://github.com/amelandri/darkstripes.git .themes/darkstripes
bundle exec rake install['darkstripes']
</code></pre>

<h2>7　GitPageへデプロイする</h2>

<p>以下を実行してデプロイします。</p>

<pre><code>bundle exec rake deploy
</code></pre>

<p>まだまだわからないことばかりだけど…<br/>
ソースコードもGitHubで管理できるので、便利そうです。</p>

<p>画像もなくさみしい記事になちゃったな&#8230;。<br/>
少しづつよくしていきたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test_02]]></title>
    <link href="http://hooooooh.github.io/blog/2014/01/08/test-02/"/>
    <updated>2014-01-08T12:02:26+09:00</updated>
    <id>http://hooooooh.github.io/blog/2014/01/08/test-02</id>
    <content type="html"><![CDATA[<h1>fuga</h1>

<pre><code>1行目
2行目
3行目
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://hooooooh.github.io/blog/2014/01/08/test/"/>
    <updated>2014-01-08T12:00:50+09:00</updated>
    <id>http://hooooooh.github.io/blog/2014/01/08/test</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
